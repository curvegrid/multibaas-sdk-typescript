/* tslint:disable */
/* eslint-disable */
{{>licenseInfo}}

// Some imports not used depending on template conditions
// @ts-ignore

interface AxiosResponse<T = any> {
  data: T;
  status: number;
  statusText: string;
  headers: any;
  config: any;
}

interface AxiosInstance {
  request<T = any>(config: any): Promise<AxiosResponse<T>>;
  get<T = any>(url: string, config?: any): Promise<AxiosResponse<T>>;
  post<T = any>(url: string, data?: any, config?: any): Promise<AxiosResponse<T>>;
  put<T = any>(url: string, data?: any, config?: any): Promise<AxiosResponse<T>>;
  patch<T = any>(url: string, data?: any, config?: any): Promise<AxiosResponse<T>>;
  delete<T = any>(url: string, config?: any): Promise<AxiosResponse<T>>;
  head<T = any>(url: string, config?: any): Promise<AxiosResponse<T>>;
  options<T = any>(url: string, config?: any): Promise<AxiosResponse<T>>;
  create(config?: any): AxiosInstance;
  interceptors: {
    request: { use(fulfilled?: any, rejected?: any): number; };
    response: { use(fulfilled?: any, rejected?: any): number; };
  };
}

export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    serverIndex?: number;
    baseOptions?: any;
    formDataCtor?: new () => any;
    axios?: AxiosInstance;
}

export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * override server index
     *
     * @type {number}
     * @memberof Configuration
     */
    serverIndex?: number;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;
    /**
     * Custom axios instance to use for requests
     *
     * @type {AxiosInstance}
     * @memberof Configuration
     */
    axios?: AxiosInstance;

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.serverIndex = param.serverIndex;
        this.baseOptions = {
            ...param.baseOptions,
            headers: {
                {{#httpUserAgent}}
                'User-Agent': "{{httpUserAgent}}",
                {{/httpUserAgent}}
                ...param.baseOptions?.headers,
            },
        };
        this.formDataCtor = param.formDataCtor;
        this.axios = param.axios;
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}
